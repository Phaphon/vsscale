# page_03_Add.py
import tkinter as tk
from tkinter import ttk
from page_99_Utils import create_confirm_popup, create_password_popup
# Mock database
PRODUCTS = ["‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤A", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤B", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤C"]
PRODUCERS = ["‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó1", "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó2", "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó3"]

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö weight controller (mock)
from vsscale_weight_controller import read_weight, set_zero  # ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ

class AddPage(tk.Frame):
    def __init__(self, master, go_back):
        super().__init__(master)

        # --- 1. ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤ ---
        tk.Label(self, text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", font=("Arial", 18, "bold"))\
            .pack(pady=10)

        # --- ‡∏Å‡∏£‡∏≠‡∏ö content ---
        content = tk.Frame(self, padx=20, pady=10)
        content.pack(expand=True, fill="both")

        # --- StringVar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input ---
        self.abbr_var = tk.StringVar()
        self.product_var = tk.StringVar()
        self.producer_var = tk.StringVar()
        self.weight_var = tk.StringVar(value=str(read_weight()))

        # --- 2 & 3. ‡πÄ‡∏•‡∏Ç‡∏¢‡πà‡∏≠ ‡πÅ‡∏•‡∏∞ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ---
        tk.Label(content, text="‡πÄ‡∏•‡∏Ç‡∏¢‡πà‡∏≠:").grid(row=0, column=0, sticky="e", padx=5, pady=6)
        tk.Entry(content, textvariable=self.abbr_var)\
            .grid(row=0, column=1, sticky="we", padx=5, pady=6)

        tk.Label(content, text="‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:").grid(row=0, column=2, sticky="e", padx=5, pady=6)
        ttk.Combobox(content, values=PRODUCTS, state="readonly", textvariable=self.product_var)\
            .grid(row=0, column=3, sticky="we", padx=5, pady=6)

        # --- 4 & 5. ‡∏ú‡∏π‡πâ‡∏ú‡∏•‡∏¥‡∏ï ‡πÅ‡∏•‡∏∞ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ---
        tk.Label(content, text="‡∏ú‡∏π‡πâ‡∏ú‡∏•‡∏¥‡∏ï:").grid(row=1, column=0, sticky="e", padx=5, pady=6)
        ttk.Combobox(content, values=PRODUCERS, state="readonly", textvariable=self.producer_var)\
            .grid(row=1, column=1, sticky="we", padx=5, pady=6)

        tk.Label(content, text="‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å:").grid(row=1, column=2, sticky="e", padx=5, pady=6)
        tk.Entry(content, textvariable=self.weight_var, state="readonly", readonlybackground="white")\
            .grid(row=1, column=3, sticky="we", padx=5, pady=6)

        # --- 6. ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏£‡∏±‡∏ö‡∏®‡∏π‡∏ô‡∏¢‡πå ---
        tk.Button(content, text="‡∏õ‡∏£‡∏±‡∏ö‡∏®‡∏π‡∏ô‡∏¢‡πå", width=12, command=self.zero_weight)\
            .grid(row=2, column=0, columnspan=2, pady=10)

        # --- 7 & 8. ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å / ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ---
        btns = tk.Frame(content)
        btns.grid(row=2, column=2, columnspan=2, pady=10)

        tk.Button(btns, text="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", width=10, command=go_back).pack(side="left", padx=8)
        tk.Button(btns, text="‚úî ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", width=10, command=self.save_record).pack(side="left", padx=8)
        #tk.Button(btns, text="‚úî ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", width=10, command=self.confirm_save).pack(side="left", padx=8)

        # ‡πÉ‡∏´‡πâ column ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÑ‡∏î‡πâ
        for c in range(4):
            content.grid_columnconfigure(c, weight=1)

    def zero_weight(self):
        set_zero()
        self.weight_var.set(str(read_weight()))

    def save_record(self):
        """ ‡πÅ‡∏™‡∏î‡∏á popup ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏£‡∏¥‡∏á """
        def do_save():
            abbr = self.abbr_var.get()
            product = self.product_var.get()
            producer = self.producer_var.get()
            weight = self.weight_var.get()

            if not abbr or not product or not producer:
                print("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
                return

            # ‚úÖ INSERT ‡πÄ‡∏Ç‡πâ‡∏≤ Database (‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SQL Server ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ)
            print("üíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", abbr, product, producer, weight)

            # ‚úÖ ‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå Label
            print("üñ®Ô∏è ‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå Label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:", abbr, product, producer, weight)

            # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤ input ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            self.abbr_var.set("")
            self.product_var.set("")
            self.producer_var.set("")
            self.weight_var.set(str(read_weight()))

        # ‡πÉ‡∏ä‡πâ popup ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        create_confirm_popup(self, message="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ?", confirm_callback=do_save)