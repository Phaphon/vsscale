import tkinter as tk
from tkinter import ttk

mock_data = [
    {"id": i, "abbr": f"AB{i}", "producer": f"Producer {i}", "product": f"Product {i}", "weight": f"{100+i} kg"}
    for i in range(1, 21)
]

ROWS_PER_PAGE = 5


class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("VSScale UI")
        self.geometry("800x500")   # ‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á‡∏ô‡∏¥‡∏î‡∏ô‡∏∂‡∏á
        self.resizable(True, True) # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÑ‡∏î‡πâ

        self.frames = {}
        for F in (MainPage, HistoryPage, AddPage, SettingsPage):
            frame = F(self)
            self.frames[F] = frame
            frame.grid(row=0, column=0, sticky="nsew")

        # make window scalable
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)

        self.show_frame(MainPage)

    def show_frame(self, page):
        frame = self.frames[page]
        frame.tkraise()


class MainPage(tk.Frame):
    def __init__(self, master):
        super().__init__(master)

        # layout grid
        self.grid_rowconfigure(0, weight=1)  # ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏ç‡πà row 0
        self.grid_columnconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=1)

        # ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏ç‡πà‡∏ã‡πâ‡∏≤‡∏¢ (‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥)
        tk.Button(self, text="‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥", font=("Arial", 14),
                  command=lambda: master.show_frame(HistoryPage)).grid(
            row=0, column=0, sticky="nsew", padx=10, pady=10
        )

        # ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏ß‡∏≤ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
        tk.Button(self, text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", font=("Arial", 14),
                  command=lambda: master.show_frame(AddPage)).grid(
            row=0, column=1, sticky="nsew", padx=10, pady=10
        )

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á row ‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏°‡∏∏‡∏°‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤)
        self.grid_rowconfigure(1, weight=0)
        tk.Button(self, text="‚öô ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", font=("Arial", 10),
                  command=lambda: master.show_frame(SettingsPage)).grid(
            row=1, column=1, sticky="se", padx=10, pady=10
        )

class HistoryPage(tk.Frame):
    def __init__(self, master):
        super().__init__(master)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
        tk.Button(self, text="‚Üê ‡∏Å‡∏•‡∏±‡∏ö", command=lambda: master.show_frame(MainPage)).pack(anchor="w", padx=10, pady=10)

        # ‡∏Å‡∏£‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡πÄ‡∏û‡∏¥‡πà‡∏° padding ‡∏£‡∏≠‡∏ö‡πÜ)
        table_frame = tk.Frame(self, bd=2, relief="groove", padx=10, pady=10)
        table_frame.pack(expand=True, fill="both", padx=20, pady=20)

        # mock data
        headers = ["‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", "‡πÄ‡∏•‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "‡πÄ‡∏•‡∏Ç‡∏¢‡πà‡∏≠", "‡∏ú‡∏π‡πâ‡∏ú‡∏•‡∏¥‡∏ï", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å", "‡∏õ‡∏£‡∏¥‡πâ‡∏ô"]
        data = [
            [1, "A01", "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏óX", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤A", "20kg"],
            [2, "B02", "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏óY", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤B", "15kg"],
            [3, "C03", "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏óZ", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤C", "30kg"],
            [4, "D04", "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏óK", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤D", "50kg"],
            [5, "E05", "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏óM", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤E", "12kg"],
        ]

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á header
        for col, text in enumerate(headers):
            tk.Label(table_frame, text=text, font=("Arial", 10, "bold"), borderwidth=1, relief="solid", width=12).grid(
                row=0, column=col, sticky="nsew"
            )

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        for row, row_data in enumerate(data, start=1):
            # ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            tk.Button(table_frame, text="‚úé", command=self.show_popup).grid(row=row, column=0, sticky="nsew")

            # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            for col, value in enumerate(row_data, start=1):
                tk.Label(table_frame, text=value, borderwidth=1, relief="solid", width=12).grid(
                    row=row, column=col, sticky="nsew"
                )

            # ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏£‡∏¥‡πâ‡∏ô
            tk.Button(table_frame, text="üñ®", command=self.show_popup).grid(row=row, column=len(headers)-1, sticky="nsew")

        # ‡∏Ç‡∏¢‡∏≤‡∏¢ column ‡πÄ‡∏ó‡πà‡∏≤‡πÜ ‡∏Å‡∏±‡∏ô
        for col in range(len(headers)):
            table_frame.grid_columnconfigure(col, weight=1)

        # ‡πÅ‡∏ñ‡∏ß‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        nav_frame = tk.Frame(self)
        nav_frame.pack(pady=10)

        tk.Button(nav_frame, text="‚Üê").pack(side="left")
        tk.Label(nav_frame, text="1/1").pack(side="left", padx=5)
        tk.Button(nav_frame, text="‚Üí").pack(side="left")

    def show_popup(self):
        popup = tk.Toplevel(self)
        popup.title("Popup")
        popup.geometry("200x100")

        tk.Label(popup, text="Pop-up").pack(pady=10)
        tk.Button(popup, text="‡∏õ‡∏¥‡∏î", command=popup.destroy).pack()


class AddPage(tk.Frame):
    def __init__(self, master):
        super().__init__(master)
        tk.Button(self, text="‚¨Ö ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", command=lambda: master.show_frame(MainPage)).pack(anchor="nw", padx=5, pady=5)
        tk.Label(self, text="‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≥)", font=("Arial", 14)).pack(expand=True)


class SettingsPage(tk.Frame):
    def __init__(self, master):
        super().__init__(master)
        tk.Button(self, text="‚¨Ö ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", command=lambda: master.show_frame(MainPage)).pack(anchor="nw", padx=5, pady=5)
        tk.Label(self, text="‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≥)", font=("Arial", 14)).pack(expand=True)


if __name__ == "__main__":
    app = App()
    app.mainloop()